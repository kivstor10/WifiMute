version: 1
# This configuration is updated to resolve the EEXIST error during npm global install.
# The primary change is to manually find and remove any old 'amplify' binaries
# before attempting the new installation with --force.

backend:
  phases:
    install:
      # This tells Amplify to use a base image with Node.js 22.
      runtime-versions:
        nodejs: 22
      commands:
        - echo "--- Backend Install Phase ---"
        # Ensure nvm is available and switch to the desired version for this shell session.
        - . "$NVM_DIR/nvm.sh"
        - nvm install 22
        - nvm use 22
        - echo "Switched to Node.js version:"
        - node -v

        # KEY FIX: Aggressively find and remove any old 'amplify' binaries
        # from any Node.js version directory managed by nvm. This is a more
        # robust way to prevent the EEXIST error.
        - echo "Searching for and removing pre-existing 'amplify' binaries..."
        - find /root/.nvm/versions/node/ -type f -name "amplify" -exec rm -f {} \;
        - echo "Pre-existing binaries removed."

        # Clean the npm cache to prevent issues with stale packages.
        - npm cache clean --force
        
        # Now that the conflicting file is confirmed to be gone, this install should succeed.
        # We keep --force as an extra precaution.
        - npm install -g @aws-amplify/backend-cli@latest --force
        - echo "Successfully installed @aws-amplify/backend-cli."
        - echo "--- End of Backend Install Phase ---"
    build:
      commands:
        - echo "--- Backend Build Phase ---"
        # Because the install phase correctly set the Node.js version,
        # we can now directly use `npx` without a complex path.
        - npx ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
        - echo "Backend deployment command executed."

frontend:
  phases:
    preBuild:
      commands:
        - echo "--- Frontend preBuild Phase ---"
        # It's good practice to ensure the frontend also uses the correct Node version.
        - . "$NVM_DIR/nvm.sh"
        - nvm use 22
        - echo "Node version for frontend:"
        - node -v
        # Use npm ci for clean, consistent, and faster frontend dependency installation.
        - npm ci
        - echo "Frontend dependencies installed with npm ci."
    build:
      commands:
        - echo "--- Frontend Build Phase ---"
        - npm run build
        - echo "Frontend build completed."
  artifacts:
    # The baseDirectory should point to your build output directory (e.g., 'dist', 'build', '.next').
    baseDirectory: dist
    files:
      - '**/*'
  cache:
    paths:
      # Caching node_modules and the npm cache directory can speed up subsequent builds.
      - node_modules/**/*
      - .npm/**/*
