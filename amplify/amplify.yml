version: 1
# This configuration is updated to resolve the EEXIST error by avoiding a global
# installation entirely. Instead, it uses `npx` to directly download and execute
# the Amplify Backend CLI in a single command.

backend:
  phases:
    install:
      # This tells Amplify to use a base image with Node.js 22.
      runtime-versions:
        nodejs: 22
      commands:
        - echo "--- Backend Install Phase ---"
        # We only need to set the Node.js version here. No global install is needed.
        - . "$NVM_DIR/nvm.sh"
        - nvm install 22
        - nvm use 22
        - echo "Switched to Node.js version:"
        - node -v
        - echo "--- End of Backend Install Phase ---"
    build:
      commands:
        - echo "--- Backend Build Phase ---"
        # KEY FIX: Use `npx --package` to download and run the CLI without a global install.
        # This is the most reliable way to avoid EEXIST errors and other global state issues.
        # It fetches the package, runs the command, and then cleans up.
        - npx --package=@aws-amplify/backend-cli@latest ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
        - echo "Backend deployment command executed successfully."

frontend:
  phases:
    preBuild:
      commands:
        - echo "--- Frontend preBuild Phase ---"
        # Ensure the frontend also uses the correct Node version.
        - . "$NVM_DIR/nvm.sh"
        - nvm use 22
        - echo "Node version for frontend:"
        - node -v
        # Use npm ci for clean, consistent, and faster frontend dependency installation.
        - npm ci
        - echo "Frontend dependencies installed with npm ci."
    build:
      commands:
        - echo "--- Frontend Build Phase ---"
        - npm run build
        - echo "Frontend build completed."
  artifacts:
    # The baseDirectory should point to your build output directory (e.g., 'dist', 'build', '.next').
    baseDirectory: dist
    files:
      - '**/*'
  cache:
    paths:
      # Caching node_modules and the npm cache directory can speed up subsequent builds.
      - node_modules/**/*
      - .npm/**/*
