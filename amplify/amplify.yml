version: 1
# This configuration is updated to resolve the EEXIST error by changing the
# global npm installation directory to a clean, isolated path. This avoids
# any conflicts with pre-existing files from older Node.js versions.

backend:
  phases:
    install:
      # This tells Amplify to use a base image with Node.js 22.
      runtime-versions:
        nodejs: 22
      commands:
        - echo "--- Backend Install Phase ---"
        # Ensure nvm is available and switch to the desired version for this shell session.
        - . "$NVM_DIR/nvm.sh"
        - nvm install 22
        - nvm use 22
        - echo "Switched to Node.js version:"
        - node -v

        # KEY FIX: Create a new directory for global npm packages and configure npm to use it.
        # This completely avoids conflicts with the default directory, which is causing the EEXIST error.
        - mkdir -p /tmp/npm-global
        - npm config set prefix '/tmp/npm-global'

        # Add our new, clean global bin directory to the system's PATH.
        # This is crucial so the shell can find the 'ampx' command later.
        - export PATH=/tmp/npm-global/bin:$PATH
        
        # Now, install the Amplify CLI globally. It will be installed safely into our new directory.
        - npm install -g @aws-amplify/backend-cli@latest
        - echo "Successfully installed @aws-amplify/backend-cli into custom directory."
        - echo "--- End of Backend Install Phase ---"
    build:
      commands:
        - echo "--- Backend Build Phase ---"
        # Add our custom global bin directory to the PATH again to ensure it's available in this phase.
        - export PATH=/tmp/npm-global/bin:$PATH
        # Verify that the 'ampx' command is found in our custom path.
        - which ampx
        # The npx command should now find the ampx binary in our custom global directory.
        - npx ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
        - echo "Backend deployment command executed."

frontend:
  phases:
    preBuild:
      commands:
        - echo "--- Frontend preBuild Phase ---"
        # It's good practice to ensure the frontend also uses the correct Node version.
        - . "$NVM_DIR/nvm.sh"
        - nvm use 22
        - echo "Node version for frontend:"
        - node -v
        # Use npm ci for clean, consistent, and faster frontend dependency installation.
        - npm ci
        - echo "Frontend dependencies installed with npm ci."
    build:
      commands:
        - echo "--- Frontend Build Phase ---"
        - npm run build
        - echo "Frontend build completed."
  artifacts:
    # The baseDirectory should point to your build output directory (e.g., 'dist', 'build', '.next').
    baseDirectory: dist
    files:
      - '**/*'
  cache:
    paths:
      # Caching node_modules and the npm cache directory can speed up subsequent builds.
      - node_modules/**/*
      - .npm/**/*
