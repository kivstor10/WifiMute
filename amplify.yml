version: 1
artifacts:
  baseDirectory: dist
  files:
    - '**/*'

backend:
  phases:
    install:
      runtime-versions:
        nodejs: 22
      commands:
        - echo "--- BEGINNING OF BACKEND INSTALL PHASE COMMANDS ---"
        - echo "Initial node version check (before any NVM):"
        - node -v
        - which node

        - rm -rf .npm
        - rm -rf node_modules
        - echo "Cleaned up .npm and node_modules for backend install."

        # Ensure nvm is sourced. The '|' indicates a multi-line scalar,
        # where indentation within the block is preserved relative to the first line.
        - |
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
          elif [ -s "/usr/local/nvm/nvm.sh" ]; then
            . "/usr/local/nvm/nvm.sh"
          fi
          echo "NVM sourced."

        - nvm install 22 || echo "nvm install 22 command failed, check nvm setup. Continuing anyway..."
        - nvm use 22 || echo "nvm use 22 command failed, check nvm setup. Continuing anyway..."
        - node -v # VERIFY: This should print v22.x.x
        - npm -v  # VERIFY: This should print npm version compatible with Node 22
        - echo "Node.js version check complete in backend install phase."

        # Add this export to make sure nvm's current path is in effect
        # Using `nvm_current` is robust as it points to the active nvm version.
        - export PATH="$(nvm_current)/bin:$PATH"
        - echo "PATH after NVM: $PATH"
        - which node # Should now point to the NVM Node 22 path

        - npm ci --cache .npm --prefer-offline
        - echo "Backend npm ci completed."

        - npm install -g @aws-amplify/backend-cli@latest
        - echo "Amplify backend CLI installed in backend install phase."
        - echo "--- END OF BACKEND INSTALL PHASE COMMANDS ---"

    build:
      commands:
        - echo "Node.js version at beginning of backend build phase (critical check):"
        - node -v # CRITICAL VERIFY HERE! This *must* be 22.x.x
        - which node # Should point to the nvm-managed Node 22

        # The key change: Explicitly use the Node 22 binary for npx
        # We assume nvm_current is available from the sourced nvm.sh
        # This command needs to be correctly indented, aligning with other commands in the 'commands' list.
        - "$(nvm_current)/bin/npx" ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
        # OR if nvm_current is not recognized by the shell for some reason, use the explicit path:
        # - "/root/.nvm/versions/node/v22.0.0/bin/npx" ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
        # (Replace v22.0.0 with the exact version of Node.js 22 that nvm installs, e.g., v22.2.0)
        - echo "Amplify backend deployment command executed."

frontend:
  phases:
    build:
      commands:
        - echo "--- BEGINNING OF FRONTEND BUILD PHASE COMMANDS ---"
        - echo "Node.js version at beginning of frontend build phase:"
        - node -v
        - which node
        - npm ci --cache .npm --prefer-offline
        - echo "Frontend npm ci completed within build phase."

        - npm run build
        - echo "Frontend build command executed."
        - echo "--- END OF FRONTEND BUILD PHASE COMMANDS ---"
  # You can keep this frontend-specific artifacts section too,
  # but the top-level one is essential for the build to start.
  artifacts: # This one is for the frontend section, the top-level one is for the whole build
    baseDirectory: dist
    files:
      - '**/*'
  cache:
    paths:
      - .npm/**/*
      - node_modules/**/*