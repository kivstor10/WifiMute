version: 1
backend:
  phases:
    install:
      runtime-versions:
        nodejs: 22
      commands:
        - echo "--- BEGINNING OF BACKEND INSTALL PHASE COMMANDS ---"
        - rm -rf .npm
        - rm -rf node_modules
        - echo "Cleaned up .npm and node_modules for backend install."

        - |
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
          elif [ -s "/usr/local/nvm/nvm.sh" ]; then
            . "/usr/local/nvm/nvm.sh"
          fi
          echo "NVM sourced."
        - nvm install 22 || echo "nvm install 22 command failed, check nvm setup."
        - nvm use 22 || echo "nvm use 22 command failed, check nvm setup."
        - node -v
        - npm -v
        - echo "Node.js version check complete in backend install phase."

        - npm ci --cache .npm --prefer-offline 
        - echo "Backend npm ci completed."

        - npm install -g @aws-amplify/backend-cli@latest 
        - echo "Amplify backend CLI installed in backend install phase."
        - echo "--- END OF BACKEND INSTALL PHASE COMMANDS ---"

    build:
      commands:
        - npx ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
        - echo "Amplify backend deployment command executed."

frontend:
  phases:
    install: # <--- ADD THIS INSTALL PHASE FOR FRONTEND
      commands:
        - echo "--- BEGINNING OF FRONTEND INSTALL PHASE COMMANDS ---"
        # Re-run npm ci to ensure frontend dependencies are fresh
        # This will utilize the cache from the backend's npm ci, but also re-verify
        - npm ci --cache .npm --prefer-offline
        - echo "Frontend npm ci completed."
        - echo "--- END OF FRONTEND INSTALL PHASE COMMANDS ---"
    build:
      commands:
        - npm run build
  artifacts:
    baseDirectory: dist
    files:
      - '**/*'
  cache:
    paths:
      - .npm/**/*
      - node_modules/**/*